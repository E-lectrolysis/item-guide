-
    let idToName = {
        damageBonus: "Main Attack Damage",
        damageBonusRaw: "Raw Main Attack Damage",
        spellDamage: "Spell Damage",
        spellDamageRaw: "Raw Spell Damage",
        rainbowSpellDamageRaw: "Rainbow Spell Damage",
        healthRegen: "Health Regen",
        healthRegenRaw: "Health Regen",
        healthBonus: "Health",
        poison: "Poison",
        lifeSteal: "Life Steal",
        manaRegen: "Mana Regen",
        manaSteal: "Mana Steal",
        spellCostPct1: "1st Spell Cost",
        spellCostRaw1: "1st Spell Cost",
        spellCostPct2: "2nd Spell Cost",
        spellCostRaw2: "2nd Spell Cost",
        spellCostPct3: "3rd Spell Cost",
        spellCostRaw3: "3rd Spell Cost",
        spellCostPct4: "4th Spell Cost",
        spellCostRaw4: "4th Spell Cost",
        thorns: "Thorns",
        reflection: "Reflection",
        attackSpeedBonus: "Attack Speed",
        speed: "Walk Speed",
        exploding: "Exploding",
        soulPoints: "Soul Point Regen",
        sprint: "Sprint",
        sprintRegen: "Sprint Regen",
        jumpHeight: "Jump Height",
        xpBonus: "XP Bonus",
        lootBonus: "Loot Bonus",
        lootQuality: "Loot Quality",
        emeraldStealing: "Stealing",
        gatherXpBonus: "Gather XP Bonus",
        gatherSpeed: "Gather Speed"
    };

    let suffixes = {
        damageBonus: "%",
        damageBonusRaw: "",
        spellDamage: "%",
        spellDamageRaw: "",
        rainbowSpellDamageRaw: "",
        healthRegen: "%",
        healthRegenRaw: "",
        healthBonus: "",
        poison: "/3s",
        lifeSteal: "/4s",
        manaRegen: "/4s",
        manaSteal: "/4s",
        spellCostPct1: "%",
        spellCostRaw1: "",
        spellCostPct2: "%",
        spellCostRaw2: "",
        spellCostPct3: "%",
        spellCostRaw3: "",
        spellCostPct4: "%",
        spellCostRaw4: "",
        thorns: "%",
        reflection: "%",
        attackSpeedBonus: " tier",
        speed: "%",
        exploding: "%",
        soulPoints: "%",
        sprint: "%",
        sprintRegen: "%",
        jumpHeight: "",
        xpBonus: "%",
        lootBonus: "%",
        lootQuality: "%",
        emeraldStealing: "%",
        gatherXpBonus: "%",
        gatherSpeed: "%",
        bonusEarthDamage: "%",
        bonusThunderDamage: "%",
        bonusWaterDamage: "%",
        bonusFireDamage: "%",
        bonusAirDamage: "%",
        bonusEarthDefense: "%",
        bonusThunderDefense: "%",
        bonusWaterDefense: "%",
        bonusFireDefense: "%",
        bonusAirDefense: "%"
    };

    let damages = {
        "damage":"Neutral",
        "earthDamage":"Earth",
        "thunderDamage":"Thunder",
        "waterDamage":"Water",
        "fireDamage":"Fire",
        "airDamage":"Air"
    };

    let skillPoints = {
        "strength": "Strength",
        "dexterity": "Dexterity",
        "intelligence": "Intelligence",
        "defense": "Defense",
        "agility": "Agility"
    };

    let bonusSkillPoints = {
        "strengthPoints": "Strength",
        "dexterityPoints": "Dexterity",
        "intelligencePoints": "Intelligence",
        "defensePoints": "Defense",
        "agilityPoints": "Agility"
    };

    let eleDefs = {
        "earthDefense": "Earth",
        "thunderDefense": "Thunder",
        "waterDefense": "Water",
        "fireDefense": "Fire",
        "airDefense": "Air"
    };

    let elementIDs = {
        bonusEarthDamage: "Earth",
        bonusThunderDamage: "Thunder",
        bonusWaterDamage: "Water",
        bonusFireDamage: "Fire",
        bonusAirDamage: "Air",
    };

    let eleDefIDs = {
        bonusEarthDefense: "Earth",
        bonusThunderDefense: "Thunder",
        bonusWaterDefense: "Water",
        bonusFireDefense: "Fire",
        bonusAirDefense: "Air"
    };


    let classReqs = {
        "bow": "Archer",
        "dagger": "Assassin",
        "relik": "Shaman",
        "spear": "Warrior",
        "wand": "Mage"
    };

    let attackSpeeds={
        "SUPER_SLOW": "Super Slow",
        "VERY_SLOW": "Very Slow",
        "SLOW": "Slow",
        "NORMAL": "Normal",
        "FAST": "Fast",
        "VERY_FAST": "Very Fast",
        "SUPER_FAST": "Super Fast"
    };

    let inverse = ["spellCostPct1", "spellCostRaw1", "spellCostPct2", "spellCostRaw2", "spellCostPct3", "spellCostRaw3", "spellCostPct4", "spellCostRaw4"]
    let minID = function(i) {
        if(i<0) {
            return Math.round(1.3*i);
        } else {
            return Math.max(Math.round(0.3*i),1);
        }
    };
    let maxID = function(i) {
        if(i<0) {
            return Math.round(0.7*i)
        } else {
            return Math.round(1.3*i)
        }
    };

    let negPos = function(key, num) {
        if(inverse.includes(key)) {
            num = - num;
        }
        if(num >= 0) {
            return "positive";
        } else {
            return "negative";
        }
    };

    String.prototype.capitalize = function() {
        return this.charAt(0).toUpperCase() + this.slice(1);
    };
doctype html
html
head
    meta(charset="utf-8")
    title Wynn Items
    meta(name="author" content="Electrolysis")
    meta(name="description" content="")
    meta(name="viewport" content="width=device-width, initial-scale=1")
    link(href="stylesheets/style.css" rel="stylesheet")
body
    script(src="./javascripts/search.js")
    .title-container
        h1.bigtitle
            | Wynn Items
        h3
            | By Electrolysis (Still under construction)
    .container
        form.searchform(onsubmit="return search()")
            .searchbar.row
                p.tag Item Search:
                input#big-search-bar(type="text" placeholder="Search for an item...")
            .filters.row
                .filters-item
                    p.tag Category:
                    select#search-category(disabled)
                        option(value="") All
                        option(value="") More Options Coming Soon
                .filters-item
                    p.tag Sort By:
                    select#sortby
                        option(value="level") Level
                        each val, key in idToName
                            option(value=key) #{val} #{suffixes[key]}
                .filters-item
                    p.tag Min. Lvl:
                    input(id = "min-lvl" type="number" placeholder="Level" value="0")
                .filters-item
                    p.tag Max. Lvl:
                    input(id = "max-lvl" type="number" placeholder="Level" value="420")
            .buttons.row
                button(type="submit") Search
                button#reset(type="cancel" onclick="window.location='/';return false;") Reset
    .title-container
        h2.bigtitle
            | #{items.length} Results
    .search-results-container
        //display of results starts here
        each item in items
            .item-container
                h2(class=item.tier.toLowerCase())
                    if item.hasOwnProperty("displayName")  && item.displayName !== undefined && item.displayName !== null && item.displayName !== ""
                        | #{item.displayName}
                    else
                        | #{item.name}
                //base stats
                if item.category.toLowerCase() === "weapon" 
                    //attack speed for weapons
                    p.other-stats#attackspeed #{attackSpeeds[item.attackSpeed]} Attack Speed
                p.other-stats#basestats
                    if item.category.toLowerCase() !== "weapon"
                        if item.health !== 0
                            span.health Health: #{item.health}
                            br
                        each val, key in eleDefs
                            if item[key] !== undefined && item[key] !== null && item[key] !== 0
                                span(class=val.toLowerCase()) #{val} 
                                | Defense: #{item[key]}
                                br
                    else
                        each val, key in damages 
                            if item[key] !== undefined && item[key] !== null && item[key] != ('0-0')
                                span(class=val.toLowerCase()) #{val} 
                                | Damage: #{item[key]}
                                br
                //requirements
                p.other-stats#sp
                    if (item.classRequirement !== undefined && item.classRequirement !== null) || item.category.toLowerCase() === "weapon"
                        | Class Req: 
                        if item.classRequirement !== null
                            | #{item.classRequirement}
                        else
                            | #{classReqs[item.type.toLowerCase()]}
                        br
                    |Combat Lv. Min: #{item.level}
                    br
                    if item.quest !== undefined && item.quest !== null
                        | Quest Req: #{item.quest}
                        br
                    each val, key in skillPoints
                        if item[key] !== undefined && item[key] !== null && item[key] !== 0
                            |#{val} Min: #{item[key]} 
                            br
                //non-elemental stats and such
                table.item-stats
                    each val, key in idToName
                        if item[key] !== undefined && item[key] !== null && item[key] !== 0
                            - let currNegPos = negPos(key, item[key]);
                            if item.identified
                                tr
                                    td(class="left idname") #{val}
                                    td(class="right " + currNegPos) #{item[key]}#{suffixes[key]}
                            else
                                tr
                                    td(class="left " + currNegPos) #{minID(item[key])}#{suffixes[key]}
                                    td(class="center idname") #{val}
                                    td(class="right " + currNegPos) #{maxID(item[key])}#{suffixes[key]}
                    //elemental ids
                    each val, key in elementIDs
                        if item[key] !== undefined && item[key] !== null && item[key] !== 0
                            - let currNegPos = negPos(key, item[key]);
                            if item.identified
                                tr
                                    td(class="left idname")
                                        b(class=val.toLowerCase()) #{val} 
                                        | Damage
                                    td(class="right " + currNegPos) #{item[key]}#{suffixes[key]}
                            else
                                tr
                                    td(class="left " + currNegPos) #{minID(item[key])}#{suffixes[key]}
                                    td(class="center idname") 
                                        b(class=val.toLowerCase()) #{val} 
                                        | Damage
                                    td(class="right " + currNegPos) #{maxID(item[key])}#{suffixes[key]}
                    each val, key in eleDefIDs
                        if item[key] !== undefined && item[key] !== null && item[key] !== 0
                            - let currNegPos = negPos(key, item[key]);
                            if item.identified
                                tr
                                    td(class="left idname")
                                        b(class=val.toLowerCase()) #{val} 
                                        | Defense
                                    td(class="right " + currNegPos) #{item[key]}#{suffixes[key]}
                            else
                                tr
                                    td(class="left " + currNegPos) #{minID(item[key])}#{suffixes[key]}
                                    td(class="center idname") 
                                        b(class=val.toLowerCase()) #{val} 
                                        | Defense
                                    td(class="right " + currNegPos) #{maxID(item[key])}#{suffixes[key]}
                if item.sockets !== null && item.sockets > 0
                    p.other-stats #{item.sockets} Powder Slots
                p(class=item.tier.toLowerCase() + " category")
                    if item.category !== "accessory"
                        |#{item.tier.capitalize()} #{item.type.capitalize()}
                    else
                        |#{item.tier.capitalize()} #{item.accessoryType.capitalize()}
                    if item.restrictions !== undefined && item.restrictions !== null && item.restrictions !== "" 
                        br
                        span.restriction #{item.restrictions.capitalize()}
                if item.addedLore !== undefined && item.addedLore !== null && item.addedLore !== ""
                    p.lore #{item.addedLore}